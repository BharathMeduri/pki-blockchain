testnet 
wallet/user "0x78714b8663f11a388b9b74c3edbc42d253d2b0da"


solc --bin pki_scont.sol > pki_scont.bin
solc --abi pki_scont.sol > pki_abi.json
abigen --abi pki_abi.json --pkg main --type LuxUni_PKI --out bind_pki.go --bin pki_scont.bin

cd ~/go/src/github.com/ethereum/go-ethereum/
godep go build ~/wrk/Dropbox/WORK/RD/LuxBCh/PKI/pki-web.go ~/wrk/Dropbox/WORK/RD/LuxBCh/PKI/bind_pki.go

godep go build ~/wrk/Dropbox/WORK/RD/LuxBCh/PKI/pki-web.go ~/wrk/Dropbox/WORK/RD/LuxBCh/PKI/bind_pki.go ~/wrk/Dropbox/WORK/RD/LuxBCh/PKI/pki_conf.go
godep go build ~/wrk/Dropbox/WORK/RD/LuxBCh/PKI/pki-rest.go ~/wrk/Dropbox/WORK/RD/LuxBCh/PKI/bind_pki.go ~/wrk/Dropbox/WORK/RD/LuxBCh/PKI/pki_conf.go

perl -p -i -e 's/\R//g' TMP.SOL

//GETH

primary	= eth.accounts[0];
web3.fromWei(eth.getBalance(primary), "ether");
personal.unlockAccount(primary);

// getting access to the contract from geth
//# inside parathesis is abi.json file for this contract
pki_abi = '[{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegDescription","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_cert","type":"bytes"}],"name":"populateCertificate","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getCaCertificate","outputs":[{"name":"","type":"bytes"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegFileName","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_regID","type":"uint256"}],"name":"deleteRegDatum","outputs":[{"name":"err","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_dataHash","type":"bytes"},{"name":"_contrAddr","type":"address"},{"name":"_fileName","type":"string"},{"name":"_description","type":"string"},{"name":"_linkFile","type":"string"},{"name":"_nodeSender","type":"address"}],"name":"newRegDatum","outputs":[{"name":"_regID","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getDeletedRegDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegContrAddr","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegLinkFile","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegCreationDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegDataHash","outputs":[{"name":"","type":"bytes"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegNodeSender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getNumRegData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getDeletedRegNodeSender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"}]'

pki_interf = eth.contract(pki_abi)
pki = pki_interf.at("0xa53cc2fd8c52df9ce3a22fe7a8f0e3a411a3b436")

// creating the contract
pki_source = 'pragma solidity ^0.4.0;contract owned {    function owned() { owner = msg.sender; }    address internal owner;    // This contract only defines a modifier but does not use    // it - it will be used in derived main contracts.    // The function body of the main contract is inserted where the special symbol    // "_;" in the definition of a modifier appears.    // If the owner calls this function, the function is executed    // and otherwise, an exception is thrown.    modifier onlyOwner {        require(msg.sender == owner);        _;    }}contract LuxUni_PKI is owned {    bytes private caCertificate;    function getCaCertificate() constant returns(bytes) { return caCertificate; }    uint private numRegData;    function getNumRegData() constant returns(uint) { return numRegData; }    RegDatum[] private regData;    function getRegNodeSender(uint _i) constant returns( address ) { return regData[_i].nodeSender; }    function getRegDataHash(uint _i) constant returns( bytes ) { return regData[_i].dataHash; }    function getRegContrAddr(uint _i) constant returns( address ) { return regData[_i].contrAddr; }    function getRegFileName(uint _i) constant returns( string ) { return regData[_i].fileName; }    function getRegDescription(uint _i) constant returns( string ) { return regData[_i].description; }    function getRegLinkFile(uint _i) constant returns( string ) { return regData[_i].linkFile; }    function getRegCreationDate(uint _i) constant returns( uint ) { return regData[_i].creationDate; }    mapping (uint => DeletedRegDatum) private deletedRegData;    function getDeletedRegNodeSender(uint _i) constant returns(address) { return deletedRegData[_i].nodeSender; }    function getDeletedRegDate(uint _i) constant returns(uint) { return deletedRegData[_i].deletionDate; }    struct RegDatum {        address nodeSender;        bytes dataHash;        address contrAddr;        string fileName;        string description;        string linkFile;        uint creationDate;    }    struct DeletedRegDatum {        address nodeSender;        uint deletionDate;    }    /*struct RegIDStruct {        uint regID;        uint creationDate;    }*/    function setOwner(address _addr) onlyOwner { owner = _addr; }    function populateCertificate(bytes _cert)  onlyOwner {        caCertificate = _cert;    }    /* nodeSender - the account of subCA or an odinary user       returns:           ID of the new register record           throws if executed by not an owner    */    function newRegDatum(bytes _dataHash, address _contrAddr, string _fileName, string _description,            string _linkFile, address _nodeSender) onlyOwner returns(uint _regID) {        _regID = regData.length++;        RegDatum reg = regData[_regID];        reg.nodeSender = _nodeSender;        reg.dataHash = _dataHash;        reg.contrAddr = _contrAddr;        reg.fileName = _fileName;        reg.description = _description;        reg.contrAddr = _contrAddr;        reg.linkFile = _linkFile;        reg.creationDate = now;        numRegData = _regID+1;    }    /* !! our black list is based on the white list.         If someone wants to put unknown certificate to the blacklist,             he has to add it to the white list first and then immidiately put it into the black list.         Is it OK or shall we make both lists separately? */    function deleteRegDatum(uint _regID) onlyOwner returns (uint err) {        if (_regID >= numRegData) {           return 1;        }        if (deletedRegData[_regID].deletionDate != 0) {           return 2;        }        deletedRegData[_regID] = DeletedRegDatum(msg.sender, now);        return 0;    }    /*    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){        bytes memory _ba = bytes(_a);        bytes memory _bb = bytes(_b);        bytes memory _bc = bytes(_c);        bytes memory _bd = bytes(_d);        bytes memory _be = bytes(_e);        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);        bytes memory babcde = bytes(abcde);        uint k = 0;        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];        return string(babcde);    }    */}'

pki_Compiled = eth.compile.solidity(pki_source);

pki_Contract = eth.contract(pki_Compiled['<stdin>:LuxUni_PKI'].info.abiDefinition);
//pki_Contract = eth.contract(pki_abi);

//geth1.6 !! --- https://ethereum.stackexchange.com/questions/15435/how-to-compile-solidity-contracts-with-geth-v1-6

pki_Contract = eth.contract([{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegDescription","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_cert","type":"bytes"}],"name":"populateCertificate","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getCaCertificate","outputs":[{"name":"","type":"bytes"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegFileName","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_regID","type":"uint256"}],"name":"deleteRegDatum","outputs":[{"name":"err","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_dataHash","type":"bytes"},{"name":"_contrAddr","type":"address"},{"name":"_fileName","type":"string"},{"name":"_description","type":"string"},{"name":"_linkFile","type":"string"},{"name":"_nodeSender","type":"address"}],"name":"newRegDatum","outputs":[{"name":"_regID","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getDeletedRegDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegContrAddr","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegLinkFile","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegCreationDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegDataHash","outputs":[{"name":"","type":"bytes"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getRegNodeSender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getNumRegData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_i","type":"uint256"}],"name":"getDeletedRegNodeSender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"}]);

pki = pki_Contract.new(
    {
      from:web3.eth.accounts[0], 
//      data:pki_Compiled['<stdin>:LuxUni_PKI'].code,
        data:'0x60606040525b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b611466806100576000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af4035146100e6578063291d3deb1461011c5780632db9b7c5146101c35780633cb36a0a1461021d578063465bb0e0146102b6578063491a34f01461035d578063494dfd5514610391578063893d20e8146105065780638b63e8c6146105585780638df0835e1461058c578063a931411f146105ec578063aee47c2f14610693578063d6c56cc6146106c7578063e013b2af1461076e578063e904d953146107ce578063ed345a4b146107f4575bfe5b34156100ee57fe5b61011a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610854565b005b341561012457fe5b61013a6004808035906020019091905050610899565b6040518080602001828103825283818151815260200191508051906020019080838360008314610189575b80518252602083111561018957602082019150602081019050602083039250610165565b505050905090810190601f1680156101b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101cb57fe5b61021b600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610966565b005b341561022557fe5b61022d6109df565b604051808060200182810382528381815181526020019150805190602001908083836000831461027c575b80518252602083111561027c57602082019150602081019050602083039250610258565b505050905090810190601f1680156102a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102be57fe5b6102d46004808035906020019091905050610a88565b6040518080602001828103825283818151815260200191508051906020019080838360008314610323575b805182526020831115610323576020820191506020810190506020830392506102ff565b505050905090810190601f16801561034f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036557fe5b61037b6004808035906020019091905050610b55565b6040518082815260200191505060405180910390f35b341561039957fe5b6104f0600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c8f565b6040518082815260200191505060405180910390f35b341561050e57fe5b610516610e76565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561056057fe5b6105766004808035906020019091905050610ea1565b6040518082815260200191505060405180910390f35b341561059457fe5b6105aa6004808035906020019091905050610ec2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105f457fe5b61060a6004808035906020019091905050610f11565b6040518080602001828103825283818151815260200191508051906020019080838360008314610659575b80518252602083111561065957602082019150602081019050602083039250610635565b505050905090810190601f1680156106855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561069b57fe5b6106b16004808035906020019091905050610fde565b6040518082815260200191505060405180910390f35b34156106cf57fe5b6106e5600480803590602001909190505061100d565b6040518080602001828103825283818151815260200191508051906020019080838360008314610734575b80518252602083111561073457602082019150602081019050602083039250610710565b505050905090810190601f1680156107605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561077657fe5b61078c60048080359060200190919050506110da565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107d657fe5b6107de611129565b6040518082815260200191505060405180910390f35b34156107fc57fe5b6108126004808035906020019091905050611134565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6108a1611175565b6003828154811015156108b057fe5b906000526020600020906007020160005b506004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109595780601f1061092e57610100808354040283529160200191610959565b820191906000526020600020905b81548152906001019060200180831161093c57829003601f168201915b505050505090505b919050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109c35760006000fd5b80600190805190602001906109d9929190611189565b505b5b50565b6109e7611209565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a7d5780601f10610a5257610100808354040283529160200191610a7d565b820191906000526020600020905b815481529060010190602001808311610a6057829003601f168201915b505050505090505b90565b610a90611175565b600382815481101515610a9f57fe5b906000526020600020906007020160005b506003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b485780601f10610b1d57610100808354040283529160200191610b48565b820191906000526020600020905b815481529060010190602001808311610b2b57829003601f168201915b505050505090505b919050565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb45760006000fd5b60025482101515610bc85760019050610c89565b60006004600084815260200190815260200160002060010154141515610bf15760029050610c89565b6040604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001428152506004600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050600090505b5b919050565b60006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cf05760006000fd5b60038054809190600101610d04919061121d565b9150600382815481101515610d1557fe5b906000526020600020906007020160005b509050828160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087816001019080519060200190610d84929190611189565b50868160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085816003019080519060200190610de092919061124f565b5084816004019080519060200190610df992919061124f565b50868160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083816005019080519060200190610e5592919061124f565b50428160060181905550600182016002819055505b5b509695505050505050565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b6000600460008381526020019081526020016000206001015490505b919050565b6000600382815481101515610ed357fe5b906000526020600020906007020160005b5060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b610f19611175565b600382815481101515610f2857fe5b906000526020600020906007020160005b506005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fd15780601f10610fa657610100808354040283529160200191610fd1565b820191906000526020600020905b815481529060010190602001808311610fb457829003601f168201915b505050505090505b919050565b6000600382815481101515610fef57fe5b906000526020600020906007020160005b506006015490505b919050565b611015611209565b60038281548110151561102457fe5b906000526020600020906007020160005b506001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110cd5780601f106110a2576101008083540402835291602001916110cd565b820191906000526020600020905b8154815290600101906020018083116110b057829003601f168201915b505050505090505b919050565b60006003828154811015156110eb57fe5b906000526020600020906007020160005b5060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b600060025490505b90565b60006004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111ca57805160ff19168380011785556111f8565b828001600101855582156111f8579182015b828111156111f75782518255916020019190600101906111dc565b5b50905061120591906112cf565b5090565b602060405190810160405280600081525090565b81548183558181151161124a5760070281600702836000526020600020918201910161124991906112f4565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061129057805160ff19168380011785556112be565b828001600101855582156112be579182015b828111156112bd5782518255916020019190600101906112a2565b5b5090506112cb91906112cf565b5090565b6112f191905b808211156112ed5760008160009055506001016112d5565b5090565b90565b6113a791905b808211156113a35760006000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600061133b91906113aa565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600061137291906113f2565b60048201600061138291906113f2565b60058201600061139291906113f2565b6006820160009055506007016112fa565b5090565b90565b50805460018160011615610100020316600290046000825580601f106113d057506113ef565b601f0160209004906000526020600020908101906113ee91906112cf565b5b50565b50805460018160011615610100020316600290046000825580601f106114185750611437565b601f01602090049060005260206000209081019061143691906112cf565b5b505600a165627a7a7230582072e6630240e0182cf3a56199b08738475308048e6e2aeaf9c280c0ae8e4263bb0029',
        gas: 3000000
    }, function(e, contract){
      if(!e) {
        if(!contract.address) {
          console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");

        } else {
          console.log("Contract mined! Address: " + contract.address);
          //console.log(contract);
        }
      }      
    })

// contract addr: 0x7104a98d6841878a7518ac0e7baa8cbe9db82076
// OLD contract addr: 0xbf6f4ded6fa3724ddd4f28351ede893575803f98
// RADULA CONTRACT 0x799e30c8873658039c5ff18eeb21dc2eec84f310
// TESTNET CONTRACT 0x5a6d8e8db0130ba82396f8a56f461d607705ac11 // BALANCE after contr mining
//4.98060668
//4.97589898537300933

eth.sendTransaction({from:eth.coinbase, to:eth.accounts[1], value: web3.toWei(2000, "ether")})

pki.newRegDatum.sendTransaction(
    "","1234","", "File7.pdf", "This is the 7th trial from geth",
    {from:eth.coinbase, gas:2000000},
    function (e, result){
       if(!e){
          console.log("newRegDatum id: " + result.args.regID);
       }
    } 
)



