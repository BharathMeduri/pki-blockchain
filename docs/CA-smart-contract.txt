This file contains the description of the Certificate Authority Contract (CAC) 
smart contract, that will manage blockchain certificates

#Attributes
+Address
+Issuer Address
+Issued list: []
+Revoked list: []

#Functions
+CreateCertificate(info)
+ValidateCertificate(certificateAddress)
+RevokCertificate(certificateAddress)


Alex description
--------------------------------
DESCRIPTION OF BASIC SMART CONTRACT FOR PKI PROJECT

I. BASIC IDEAS.

I.1. “LuxUni_PKI” is the main class of the Smart Contract:
I.1.a. It provides the core functionality like storage of hashes for PKIs and certificates (external files) into the blockchain, certificates’ and PKIs’ revocation, etc
I.1.a. In order to support the functionality of encrypting data stored into the blockchain, this class is derived from “LUCrypProxy” class

I.2. “LUCrypProxy” class provides the basic encryption functionality:
I.2.a Presently it has unencrypted data as an input (it is very easy to extend its functionality for receiving encrypted data as an input as well)
I.2.b It sends the data for encryption to the External Crypto Module running on one of Ethereum nodes (similar to Oraclized service) with the event “evSendData”.
I.2.c It sends the encrypted data back to the calling class with “LUCrypProxy.encryptCallBack()” interface.


II. “LuxUni_PKI” CORE FUNCTIONALITY

II.1 The class has an array and a mapping with data regarding certificates/PKI confirmation/revocation:
II.1.a. “regData” array contains data regarding confirmed (originated) certificates and/or PKIs (external files)
II.1.b. “deletedRegData” mapping contains links to the revoked record of the array [II.1.a] above (revocation list)

II.2 The class has a method “newRegDatum()” that confirms (originates) the certificate or the PKI:
II.2.a. The method stores hash to the blockchain, while the PKI files or certificate files remain in external storage (MongoDB, StoreJ, clouds, etc). The functionality can easily be extended to loading of external files per se into Ethereum blockchain, but from ether saving viewpoint that kind of architecture can be doubtful.
II.2.b. If “encrypted” flag is not null, some fields of record containing new confirmed (originated) certificate/PKI data can be encrypted. Present implementation provides encryption of “Description” field, but generally any field can be encrypted depending on the value of “encrypted” flag specifying which field was encrypted

II.3 The class has a method “deleteRegDatum()” that includes links to the confirmed certificates/PKI records into the revocation list


III. ADDITIONAL FUNCTIONALITY

III.1. The root CA has own smart contract (CA smart contract), he can add Sub CA to execute his CA smart contract as well.
III.2. CA smart contract keeps track of its owner address and all its methods except for Certificate Signing Request can be processed by root CA and, probably, its sub CAs (TO BE DISCUSSED) 
III.3. CA smart contract has a method “SignSubCA(parent address)” which authorizes other addresses to sign certificates for this parent Sub CA.
A QUESTION : AS JUST A SUGGESTION - MAY BE WE WILL KEEP ALL SUB CAs IN THE SPECIAL ARRAY of the root CA smart contract (with internal references to parents inside this array). In this case CA smart contract has all the information on all sub CAs in the CA Smart Contract.
III.4. CA smart contract has a method “CertificateSignRequest(CA address)” which is called by any person. CA address is an address of sub CA who is supposed to sign the certificate
III.5. Anonymous Certificate Bulletin Board ?


